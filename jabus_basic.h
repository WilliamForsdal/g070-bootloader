// auto generated by dsg2.py, SRC002-103 commit hash 49274d3d12bd1e008f58119c54786ab7f9ca13e5
// Run with args: ['C:\\dev\\src002-103\\dsg2.py', 'jabus_basic.dsg', '--gen_h', '--gen_c', '--gen_py']
#ifndef INC_GUARD_JABUS_BASIC
#define INC_GUARD_JABUS_BASIC

#include <stdint.h>

#if !__cplusplus
typedef int32_t fp1616_t;
typedef int32_t fp0824_t;
#else  // C++
    #error not supported
#endif

#ifndef PACKED
#define PACKED  __attribute__ ((__packed__))
#endif

// constants



// normal blocks
// bitdef PROBE_OP_FLAGS(u16)
#define DSG_PROBE_OP_FLAGS_IN_SMALL_BOOTLOADER_BIT         0
#define DSG_PROBE_OP_FLAGS_IN_SMALL_BOOTLOADER_MASK        0x00000001
#define DSG_PROBE_OP_FLAGS_IN_BIG_BOOTLOADER_BIT           1
#define DSG_PROBE_OP_FLAGS_IN_BIG_BOOTLOADER_MASK          0x00000002
#define DSG_PROBE_OP_FLAGS_SETTINGS_WRITE_OK_BIT           2
#define DSG_PROBE_OP_FLAGS_SETTINGS_WRITE_OK_MASK          0x00000004
#define DSG_PROBE_OP_FLAGS_ROUTING_OK_BIT                  3
#define DSG_PROBE_OP_FLAGS_ROUTING_OK_MASK                 0x00000008
#define DSG_PROBE_OP_FLAGS_NORMAL_OP_BIT                   4
#define DSG_PROBE_OP_FLAGS_NORMAL_OP_MASK                  0x00000010
#define DSG_PROBE_OP_FLAGS_FATAL_ERROR_BIT                 5
#define DSG_PROBE_OP_FLAGS_FATAL_ERROR_MASK                0x00000020
#define DSG_PROBE_OP_FLAGS_HALF_DUPLEX_BIT                 6
#define DSG_PROBE_OP_FLAGS_HALF_DUPLEX_MASK                0x00000040
#define DSG_PROBE_OP_FLAGS_RESTART_NEEDS_FF_BIT            7
#define DSG_PROBE_OP_FLAGS_RESTART_NEEDS_FF_MASK           0x00000080
#define DSG_PROBE_OP_FLAGS_FLOW_CTRL_BIT                   8
#define DSG_PROBE_OP_FLAGS_FLOW_CTRL_MASK                  0x00000100

// struct JabusHeader
struct PACKED JabusHeader
{
    uint8_t dst;                   // 0
    uint8_t length;                // 1
    uint16_t cmd;                  // 2
}; // size=4, align=1
// struct JabusHeaderAnsExtended
struct PACKED JabusHeaderAnsExtended
{
    uint8_t dst;                   // 0
    uint8_t length;                // 1
    uint16_t cmd;                  // 2
    uint32_t ext_length;           // 4
}; // size=8, align=1
// struct JabusHeaderReqExtended
struct PACKED JabusHeaderReqExtended
{
    uint8_t dst;                   // 0
    uint8_t length;                // 1
    uint16_t cmd;                  // 2
    uint32_t ext_length;           // 4
    uint32_t ext_address;          // 8
}; // size=12, align=1
// struct ProbeConstantData
struct PACKED ProbeConstantData
{
    uint8_t jabus_hw_type;         // 0
    uint32_t product_table_ptr;    // 1
    uint16_t product_table_size;   // 5
    uint16_t protocol_product_specific_type; // 7
}; // size=9, align=1
// Jabus Cmd Echo (0x0004)
// struct Echo
struct PACKED JabusRequestEcho
{
    struct JabusHeader header;     // 0
    uint8_t data[4];               // 4
}; // size=8, align=0
// struct Echo
struct PACKED JabusAnswerEcho
{
    struct JabusHeader header;     // 0
    uint8_t data[4];               // 4
}; // size=8, align=0
// Jabus Cmd NOK (0x0002)
// struct NOK
struct PACKED JabusRequestNOK
{
    struct JabusHeader header;     // 0
}; // size=4, align=0
// struct NOK
struct PACKED JabusAnswerNOK
{
    struct JabusHeader header;     // 0
    uint16_t the_bad_cmd;          // 4
    int32_t error_code;            // 6
    uint32_t info;                 // 10
}; // size=14, align=0
// Jabus Cmd ReadMem (0x0010)
// struct ReadMem
struct PACKED JabusRequestReadMem
{
    struct JabusHeader header;     // 0
    uint32_t addr;                 // 4
    uint16_t length;               // 8
}; // size=10, align=0
// struct ReadMem
struct PACKED JabusAnswerReadMem
{
    struct JabusHeaderAnsExtended header; // 0
}; // size=8, align=0
// Jabus Cmd Probe (0x0000)
// struct Probe
struct PACKED JabusRequestProbe
{
    struct JabusHeader header;     // 0
}; // size=4, align=0
// struct Probe
struct PACKED JabusAnswerProbe
{
    struct JabusHeader header;     // 0
    uint8_t main_cpu_nr;           // 4
    uint16_t op_flags;             // 5
    struct ProbeConstantData cdata; // 7
}; // size=16, align=0

// bitbanding
// bitdef bitdef PROBE_OP_FLAGS: no bitbanding for this type
// struct JabusHeader_BB
struct JabusHeader_BB
{
    uint32_t dst[8];
    uint32_t length[8];
    uint32_t cmd[16];
}; // size=4, align=1
// struct JabusHeaderAnsExtended_BB
struct JabusHeaderAnsExtended_BB
{
    uint32_t dst[8];
    uint32_t length[8];
    uint32_t cmd[16];
    uint32_t ext_length[32];
}; // size=8, align=1
// struct JabusHeaderReqExtended_BB
struct JabusHeaderReqExtended_BB
{
    uint32_t dst[8];
    uint32_t length[8];
    uint32_t cmd[16];
    uint32_t ext_length[32];
    uint32_t ext_address[32];
}; // size=12, align=1
// struct ProbeConstantData_BB
struct ProbeConstantData_BB
{
    uint32_t jabus_hw_type[8];
    uint32_t product_table_ptr[32];
    uint32_t product_table_size[16];
    uint32_t protocol_product_specific_type[16];
}; // size=9, align=1
// jabus_cmd jabus_cmd Echo: no bitbanding for this type
// jabus_cmd jabus_cmd NOK: no bitbanding for this type
// jabus_cmd jabus_cmd ReadMem: no bitbanding for this type
// jabus_cmd jabus_cmd Probe: no bitbanding for this type
union PACKED JabusCommands
{
  struct JabusRequestEcho reqEcho;
  struct JabusAnswerEcho ansEcho;
  struct JabusRequestNOK reqNOK;
  struct JabusAnswerNOK ansNOK;
  struct JabusRequestReadMem reqReadMem;
  struct JabusAnswerReadMem ansReadMem;
  struct JabusRequestProbe reqProbe;
  struct JabusAnswerProbe ansProbe;
};
#define JABUS_CMD_ECHO                 0x0004
#define JABUS_CMD_NOK                  0x0002
#define JABUS_CMD_READ_MEM             0x0010
#define JABUS_CMD_PROBE                0x0000

#endif // include guard
